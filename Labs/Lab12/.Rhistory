Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 2:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc <- function( n >= 3, initial) {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 2:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
#Prob 2: Create a function myAbs that calculates the absolute value of a number
#define a function to look at a given value of i
MyAbs <- function(xVec) {
for(i in 1:length(xVec)) {
if(xVec[i] > 0){
MyAbsVar <- xVec[i]
} #if the value is greater than zero, MyAbsVar is that value
if(xVec[i] < 0){
MyAbsVar <- - xVec[i]
} #if the value is less than zero, MyAbsVar is the negative of the negative, making that number positive
}
#return value of MyAbsVar
return(MyAbsVar)
}
#check with c(1.1, 2, 0, -4.3, 9, -12)
y <- c(1.1, 2, 0, -4.3, 9, 12)
MyAbs(y) #This DOES NOT work... returns just 12?
#Prob 2: Create a function myAbs that calculates the absolute value of a number
#define a function to look at a given value of i
MyAbs <- function(xVec) {
for(i in 1:length(xVec)) {
if(xVec[i] < 0){
xVec[i] <- - xVec[i]
} #if the value is less than zero, MyAbsVar is the negative of the negative, making that number positive
}
#return value of MyAbsVar
return(xVec)
}
#Calling the function
#check with value = 5
MyAbs(5) #This works
#check with value = -2.3
MyAbs(-2.3) #This works!
#check with c(1.1, 2, 0, -4.3, 9, -12)
y <- c(1.1, 2, 0, -4.3, 9, 12)
MyAbs(y) #This DOES NOT work... returns just 12?
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferenceVector[i] <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferenceVector)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferenceVector <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferenceVector)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
FibFunc <- function( n >= 3, initial) {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
FibFunc <- function(n >= 3, initial) {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc <- function(n , initial) {
#for somereason, won't let me parameterize in the function parenthesis
n >= 3
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
#call the function
FibFunc(n=10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc <- function(n , initial) {
#for somereason, won't let me parameterize in the function parenthesis
n >= 3
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 1:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc <- function(n, initial) {
#for somereason, won't let me parameterize in the function parenthesis... if else
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:length(n)) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
FibFunc <- function(n, initial) {
#for somereason, won't let me parameterize in the function parenthesis... if else
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc <- function(n, initial) {
#for somereason, won't let me parameterize in the function parenthesis... if else
if(n < 3){
print("Error, n must be greater than or equal to three")
}
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This DOES NOT work, replacement has a length of zero
FibFunc(2,1)
FibFunc(2,0)
sum((DataForLab07$x - mean(DataForLab07$x)^2)
sum((DataForLab07$x - mean(DataForLab07$x))^2)
sum((DataForLab07$x - mean(DataForLab07$x))^2)
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferences <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferences)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
FibFunc(5, 0)
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
}
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This works!
FibFunc(5, 0)
FibFunc(10,3)
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else(initial <= 1){
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else(initial <= 1){
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else(initial <= 1) {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This works!
FibFunc(5, 0)
FibFunc(10,3)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
return(sum(SquaredDifferencesVect))
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect[i] <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
#Lab7 Prob 1: create my own function that can calculate the area of a triangle
triangleArea <- function(height, base) {
#Step 1: input the triangle base and height
HBSum <- height * base
#Step 2: multiply them together
MyArea <- HBSum * .5
#Step 3: multiply this answer by .5
return(MyArea)
}
#Call the function...Now, I will check that it works with a triangle with a height of 6 and a base of 9
triangleArea(6,9)
#If my triangle has a base of 10 and a height of 9 the area is...
triangleArea(9,10) #It works!
#Prob 2: Create a function myAbs that calculates the absolute value of a number
#define a function to look at a given value of i
MyAbs <- function(xVec) {
for(i in 1:length(xVec)) {
if(xVec[i] < 0){
xVec[i] <- - xVec[i]
} #if the value is less than zero, MyAbsVar is the negative of the negative, making that number positive
}
#return value of MyAbsVar
return(xVec)
}
#Calling the function
#check with value = 5
MyAbs(5) #This works
#check with value = -2.3
MyAbs(-2.3) #This works!
#check with c(1.1, 2, 0, -4.3, 9, -12)
y <- c(1.1, 2, 0, -4.3, 9, 12)
MyAbs(y) #This works!
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This works!
FibFunc(5, 0)
FibFunc(10,3)
#Problem 4: create a function that takes the square of the difference between two numbers
SqDiff <- function(j, k) {
#get the difference of j and k
Dif <- j-k
MySqDiff <- Dif ^2
return(MySqDiff)
}
#Call the function
SqDiff(8,3) #This works
SqDiff(5,3)
#Problem 4b: define a function that calculates average
MyMean <- function(VectorX) {
#add the numbers all together
MySum <- sum(VectorX)
#divide that number by the length of the vector
MyAvg <- MySum / length(VectorX)
return(MyAvg)
}
#calling the function
MyMean(c(5,15,10)) #This works
MyMean(DataForLab07$x) #This works
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect[i] <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This worked!
setwd("~/Desktop")
setwd("~/Desktop/Computational_Biology/CompBioHomeworkandLabs/Labs/Lab12")
rm(list=ls())
CameraTrapData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv" , stringsAsFactors = F )
