#call the function
FibFunc(10 , 1) #This works!
FibFunc(5, 0)
FibFunc(10,3)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
return(sum(SquaredDifferencesVect))
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect[i] <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This gives me 755.9553, not 179442.2... DOES NOT work
#Lab7 Prob 1: create my own function that can calculate the area of a triangle
triangleArea <- function(height, base) {
#Step 1: input the triangle base and height
HBSum <- height * base
#Step 2: multiply them together
MyArea <- HBSum * .5
#Step 3: multiply this answer by .5
return(MyArea)
}
#Call the function...Now, I will check that it works with a triangle with a height of 6 and a base of 9
triangleArea(6,9)
#If my triangle has a base of 10 and a height of 9 the area is...
triangleArea(9,10) #It works!
#Prob 2: Create a function myAbs that calculates the absolute value of a number
#define a function to look at a given value of i
MyAbs <- function(xVec) {
for(i in 1:length(xVec)) {
if(xVec[i] < 0){
xVec[i] <- - xVec[i]
} #if the value is less than zero, MyAbsVar is the negative of the negative, making that number positive
}
#return value of MyAbsVar
return(xVec)
}
#Calling the function
#check with value = 5
MyAbs(5) #This works
#check with value = -2.3
MyAbs(-2.3) #This works!
#check with c(1.1, 2, 0, -4.3, 9, -12)
y <- c(1.1, 2, 0, -4.3, 9, 12)
MyAbs(y) #This works!
FibFunc <- function(n, initial) {
if(initial > 1) {
print("Error: initial argument not 0 or 1")
} else {
#create a fib seq n variables long starting with initial
Fibseq <- rep(0 , n)
Fibseq[1] <- initial
Fibseq[2] <- 1
#create a forloop to run through the equation to get the fib seq
for(i in 3:n) {
Fibseq[i] <- Fibseq[i-1] + Fibseq[i-2]
}
}
#want the function to spit out the first n #s of Fib starting with initial
return(Fibseq)
}
#call the function
FibFunc(10 , 1) #This works!
FibFunc(5, 0)
FibFunc(10,3)
#Problem 4: create a function that takes the square of the difference between two numbers
SqDiff <- function(j, k) {
#get the difference of j and k
Dif <- j-k
MySqDiff <- Dif ^2
return(MySqDiff)
}
#Call the function
SqDiff(8,3) #This works
SqDiff(5,3)
#Problem 4b: define a function that calculates average
MyMean <- function(VectorX) {
#add the numbers all together
MySum <- sum(VectorX)
#divide that number by the length of the vector
MyAvg <- MySum / length(VectorX)
return(MyAvg)
}
#calling the function
MyMean(c(5,15,10)) #This works
MyMean(DataForLab07$x) #This works
SumOSquares <- function(VectorA) {
#calculate the mean of the dataset (use MyMean)
TheAvg <- MyMean(VectorA)
#preallocation vector!
SquaredDifferencesVect <- rep(0, length(VectorA))
#subtract the mean from each individual number in the dataset (use a for loop?)
#square that difference (use SqDiff)
for(i in 1:length(VectorA)) {
SquaredDifferencesVect[i] <- SqDiff(VectorA[i], TheAvg)
}
#the differences are all summed
SummedSquaredDifference <- sum(SquaredDifferencesVect)
return(SummedSquaredDifference)
}
#Call the function
SumOSquares(DataForLab07$x) #This worked!
library(tidyverse)
#THURSDAYS CLASS
rm(list=ls())
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
var1 <- 1:10
var2 <- 11:20
mytreatment <- c(rep("A", 5), rep("B", 5))
mydata <- data.frame(var1 = var1, var2 = var2,
treatment= mytreatment)
ggplot(data = mydata) +
geom_bar(mapping = aes(x = var1, y = var2))
ggplot(data = mydata) +
geom_point(mapping = aes(x = var1, y = var2))
ggplot(data=mydata, aes(x=treatment, y=var2)) +
geom_boxplot()
ggplot(data=mydata) +
geom_line(mapping = aes(x=var1, y=var2, color = treatment))
ggplot(data = mydata) +
geom_point(mapping = aes(x = var1, y = var2, y = treatment))
ggplot(data=mydata) +
geom_line(mapping = aes(x=var1, y=var2, color = treatment))
ggplot(data=mydata) +
geom_line(mapping = aes(x=var1, y=var2, line = dashed))
ggplot(data=mydata) +
geom_line(mapping = aes(x=var1, y=var2, linetype = drv))
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2, linetype = "dashed"))
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2, linetype = dashed))
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2, linetype = dotted))
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2, linetype = b))
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2) linetype = "dashed")
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2), linetype = "dashed")
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2), color = "pink")
ggplot(data = mydata) +
geom_line(mapping = aes(x = var1, y = var2), color = "pink", linetype = "dotted")
rm(list=ls())
setwd("~/Desktop/Computational_Biology/CompBioHomeworkandLabs/Labs/Lab11")
read.csv(GlobalWoodDensityDatabase.csv)
read.csv(file = GlobalWoodDensityDatabase.csv)
WoodDB <- read.csv("GlobalWoodDensityDataBase.csv", stringsAsFactors = FALSE )
WoodDB <- read.csv("GlobalWoodDensityDatabase.csv", stringsAsFactors = FALSE )
WoodDB <- read.csv("GlobalWoodDensityDatabase.csv" , stringsAsFactors = F )
WoodDB <- read.csv("GlobalWoodDensityData.csv" , stringsAsFactors = F )
#Change the column names if they are too long
colnames(WoodDB)[4] <- "Wood Density"
head(WoodDB)
#Determine which entry is entered as NA for "Wood Density"
#My plan: Use is.na for that column
is.na(WoodDB$`Wood Density`)
which(is.na(WoodDB$`Wood Density`))
#Remove it
FinalWoodDB <- WoodDB[-c(12151)]
#Check
which(is.na(FinalWoodDB))
#Check
which(is.na(FinalWoodDB$`Wood Density`))
#Remove it
FinalWoodDB <- WoodDB[-c(12151), ]
#Check
which(is.na(FinalWoodDB$`Wood Density`))
#This did not seem to work... Is WoodDB a dataframe?
str(WoodDB)
#Remove it
FinalWoodDB <- WoodDB[-c(12151, )]
#Remove it
FinalWoodDB <- WoodDB(c(12131, ))
#Remove it
FinalWoodDB <- WoodDB[c(12131, )]
#Remove it
FinalWoodDB <- WoodDB[-c(12131, )]
#Remove it
FinalWoodDB <- WoodDB[-c(12131,4 )]
#Check
which(is.na(FinalWoodDB$`Wood Density`))
#Remove it
FinalWoodDB <- WoodDB[-c(12131), ]
#Check
which(is.na(FinalWoodDB$`Wood Density`))
#Remove it
FinalWoodDB <- WoodDB[-c(12151), ]
#Check
which(is.na(FinalWoodDB$`Wood Density`))
#Remove it
FinalWoodDB <- WoodDB[-c(12150), ]
#Check
which(is.na(FinalWoodDB$`Wood Density`))
library(dplyr)
AvgWoodDB <- summarise(group_by(FinalWoodDB, Binomial, Family), AverageWoodDensity = mean('Wood Density'))
AvgWoodDB <- summarise(group_by(FinalWoodDB, Binomial),
AverageWoodDensity = mean('Wood Density'))
head(AvgWoodDB)
#Change the column names if they are too long
colnames(WoodDB)[4] <- "WoodDensity"
head(WoodDB)
#Determine which row
#My plan: Use is.na for that column
is.na(WoodDB$`Wood Density`)
#This would still require me to just scroll through, but look for a TRUE isntead of an
#empty column
which(is.na(WoodDB$`Wood Density`))
#Determine which row
#My plan: Use is.na for that column
is.na(WoodDB$`WoodDensity`)
#This would still require me to just scroll through, but look for a TRUE isntead of an
#empty column
which(is.na(WoodDB$`WoodDensity`))
#Remove it
FinalWoodDB <- WoodDB[-c(12150), ] #It would be my instinct to use row 12151 bc that is how
#it appears in the csv file, but maybe R knows to not count headers
#Check
which(is.na(FinalWoodDB$`WoodDensity`))
#Remove it
FinalWoodDB <- WoodDB[-c(12150), ] #It would be my instinct to use row 12151 bc that is how
#it appears in the csv file, but maybe R knows to not count headers
#Check
which(is.na(FinalWoodDB$`WoodDensity`))
#This didn't work
AvgWoodDB <- select(FinalWoodDB, Binomial, Family, WoodDensity )
head(AvgWoodDB)
head(WoodDB)
Species <- group_by(FinalWoodDB, Binomial)
Species <- group_by(AvgWoodDB, Binomial)
head(AvgWoodDB)
head(Species)
#This didn't work
SlimWoodDB <- select(FinalWoodDB, Binomial, Family, WoodDensity )
head(SlimWoodDB)
#This gives me a dataframe without the excess variables
AvgWoodDB <- summarize(SlimWoodDB, MeanWD = mean(WoodDensity))
head(AvgWoodDB)
AvgWoodDB
#This gives me a dataframe without the excess variables
AvgWoodDB <- summarize(SlimWoodDB,Binomial, Family, MeanWD = mean(WoodDensity))
#This gives me a dataframe without the excess variables
AvgWoodDB <- summarize(group_by(SlimWoodDB,Binomial, Family), MeanWD = mean(WoodDensity))
AvgWoodDB
#BONUS: Create a new dataframe that has the average density for family, not species
FamAvgWoodDB <- summarise(group_by(SlimWoodDB, Family),
MeanWD = mean(WoodDensity))
FamAvgWoodDB
#Sort the dataframe
SortedFamAvgWoodDB <- arrange(FamAvgWoodDB, MeanWD)
SortedFamAvgWoodDB
#This worked.
#Highest wood density families:
tail(SortedFamAvgWoodDB)
tail(SortedFamAvgWoodDB, 10)
head(SortedFamAvgWoodDB, 8)
#Step 4: Plot data
#Plot the densities of species from the same families
FamData <- select(FinalWoodDB, Binomial, Family, WoodDensity)
head(FamData)
arrange(FamData)
arrange(FamData, WoodDensity)
SortedFamData <- arrange(FamData, WoodDensity)
LowDFamData <- head(SortedFamData, 8)
HighDFamData <- tail(SortedFamData, 8)
ggplot(data = LowDFamData)+
geom_boxplot(mapping = aes(y = WoodDensity))+
facet_wrap(~ Family)
ggplot(data = LowDFamData)+
geom_boxplot(mapping = aes(x = ,y = WoodDensity))+
facet_wrap(~ Family)
ggplot(data = LowDFamData)+
geom_boxplot(mapping = aes(x = Family ,y = WoodDensity))+
facet_wrap(~ Family)
SortedFamData <- arrange(FinalWoodDB, WoodDensity)
SortedFinalWoodDB <- arrange(FinalWoodDB, WoodDensity)
LowDFamData <- head(SortedFinalWoodDB, 8)
#For low density facet box plots, only want data for specific families
LowDenData <- select(SortedFinalWoodDB, Binomial, Family = "Caricaceae: Tetramelaceae", WoodDensity)
SortedFinalWoodDB
AvgWoodDB
#Step 4: Plot data
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families (listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <- filter(AvgWoodDB, Family == "Caricaceae", "Paulowniaceae", "Moringaceae", "Hernandiaceae",
"Bixaceae", "Muntingiaceae", "Datiscaceae", "Tetramelaceae" )
HighDens <- tail(SortedFamAvgWoodDB, 10)
LowDens <- head(SortedFamAvgWoodDB, 8)
#Step 4: Plot data
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families (listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <- AvgWoodDB[LowDens]
#Step 4: Plot data
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families (listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <- AvgWoodDB(LowDens)
#Step 4: Plot data
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families (listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <- AvgWoodDB[LowDens]
HighDens <- tail(SortedFamAvgWoodDB, 8)
LowDens <- head(SortedFamAvgWoodDB, 8)
LowDens
HighDens
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families
#(listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <-filter(AvgWoodDB, Family == "Caricaceae", "Paulowniaceae", "Moringaceae",
"Hernandiaceae", "Bixaceae", "Muntingiaceae", "Datiscaceae", "Tetramelaceae")
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families
#(listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <-filter(AvgWoodDB, Family == "Caricaceae" & "Paulowniaceae" & "Moringaceae" &
"Hernandiaceae" & "Bixaceae" & "Muntingiaceae" & "Datiscaceae" & "Tetramelaceae")
FamAvgWoodDB
AvgWoodDB
LowDens
LowDensDB <-AvgWoodDB[LowDens$Family]
#Plot the densities of species from the same families
#Get a dataframe with only data from the lowest density families
#(listed above, there are eight of them)
#I know that I want to pull from AvgWoodDB
LowDensDB <-filter(AvgWoodDB, Family %in% LowDens$Family)
LowDensDB
HighDensDB <- filter(AvgWoodDB, Family %in% HighDes$Family)
HighDensDB
HighDensDB <- filter(AvgWoodDB, Family %in% HighDes$Family)
HighDensDB <- filter(AvgWoodDB, Family %in% HighDens$Family)
HighDensDB
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family , y = WoodDensity))+
facet_wrap(~ Family)
AvgWoodDB
ggplot(data = LowDFamData)+
geom_boxplot(mapping = aes(x = Family ,y = MeanWD))+
facet_wrap(~ Family)
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family , y = MeanWD))+
facet_wrap(~ Family)
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes( , y = MeanWD))+
facet_wrap(~ Family)
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(y = MeanWD))+
facet_wrap(~ Family)
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = factor(0), y = MeanWD))+
facet_wrap(~ Family)
ggplot(data = HighDensDB)+
geom_boxplot(mapping= aes(x= factor(0), y= MeanWD))+
facet_wrap(~Family)
#Step 5: Graph these such that they can be compared in a single graph
ggplot(data = HighDensDB, LowDensDB)+
geom_boxplot(mapping= aes(x= factor(0), y= MeanWD))+
coord_flip(~Family)
#Step 5: Graph these such that they can be compared in a single graph
ggplot(data = HighDensDB, LowDensDB)+
geom_boxplot(mapping= aes(x= MeanWD, y= Family))+
coord_flip(~Family)
#Step 5: Graph these such that they can be compared in a single graph
ggplot(data = HighDensDB %>% LowDensDB)+
geom_boxplot(mapping = aes(x= MeanWD, y= Family))+
coord_flip(~Family)
#Step 5: Graph these such that they can be compared in a single graph
merge(LowDensDB , HighDensDB)
#Step 5: Graph these such that they can be compared in a single graph
LowHighDB <- merge(LowDensDB , HighDensDB)
LowHighDB
#Step 5: Graph these such that they can be compared in a single graph
LowHighDB <- rbind(LowDensDB , HighDensDB)
LowHighDB
ggplot(data = LowHighDB)+
geom_boxplot(mapping = aes(x= MeanWD, y= Family))+
coord_flip(~Family)
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = MeanWD, y = Family))
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = MeanWD, y = Family))+
coord_flip(~Family)
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = MeanWD, y = Family))+
coord_flip(Family)
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = MeanWD, y = Family))+
coord_flip()
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family, y = MeanWD))+
coord_wrap()
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family, y = MeanWD))+
coord_wrap()
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = MeanWD, y = Family))
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = factor(0), y = MeanWD))+
facet_wrap(~ Family)
ggplot(data = HighDensDB)+
geom_boxplot(mapping = aes(x= factor(0), y= MeanWD))+
facet_wrap(~Family)
#Now, plot each
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = factor(0), y = MeanWD))+
facet_wrap(~ Family)
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family, y = MeanWD))
ggplot(data = LowDensDB)+
geom_boxplot(mapping = aes(x = Family, y = MeanWD))+
coord_flip()
ggplot(data = HighDensDB)+
geom_boxplot(mapping = aes(x = Family, y = MeanWD))+
coord_flip()
